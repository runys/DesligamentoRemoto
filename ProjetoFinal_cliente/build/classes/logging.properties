############################################################
#    Propriedades Globais
############################################################

# "handlers" especifica uma lista de classes Handler separadas
# por v\u00edrgulas. Estes handlers ser\u00e3o instalados durante a 
# inicializa\u00e7\u00e3o da m\u00e1quina virtual Java (JVM).
#
# A linha abaixo mostra um exemplo adicionando a gera\u00e7\u00e3o de logs em arquivo
# usando um FileHandler.
#
# As classes handler dispon\u00edveis s\u00e3o:
# ConsoleHandler
# FileHandler
# MemoryHandler
# SocketHandler
# StreamHandler

handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# N\u00edvel de log default.
# Especifica quais os tipos de eventos ser\u00e3o logados.
# Qualquer n\u00edvel atribu\u00eddo na se\u00e7\u00e3o "Propriedades espec\u00edficas para classes"
# ir\u00e1 sobrescrever o n\u00edvel atribu\u00eddo aqui para aquela classe espec\u00edfica
# Note tamb\u00e9m que o ConsoleHandler tem um n\u00edvel separado, limitando a 
# quantidade de mensagens impressas no console.
.level = INFO

############################################################
# Propriedades espec\u00edficas dos handlers
# Descreve configura\u00e7\u00f5es espec\u00edficas para cada handler.
############################################################

# Estas s\u00e3o op\u00e7\u00f5es para o FileHandler.
# A propriedade pattern indica o arquivo onde o log ser\u00e1 gravado. 
#     / - o separador de caminhos
#    %t - o diret\u00f3rio tempor\u00e1rio do sistema (ex. /tmp ou C:\Temp)
#    %h - o valor da propriedade do sistema "user.home"
#    %g - um n\u00famero sequencial para distinguir os arquivos de log
#    %u - um n\u00famero \u00fanico para resolver conflitos
#    %% - quando se deseja representar um sinal de percentagem "%"
# A propriedade formatter indica a formata\u00e7\u00e3o do log, neste caso, formato XML.
# A propriedade limit indica o tamanho m\u00e1ximo (em bytes) de cada arquivo de log.
# A propriedade count especifica o n\u00famero m\u00e1ximo de arquivos de log que ser\u00e3o gerados.
java.util.logging.FileHandler.pattern = %h/logperdidomomal.log
java.util.logging.FileHandler.count = 10
java.util.logging.FileHandler.limit = 500
java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# Estas s\u00e3o as op\u00e7\u00f5es para o ConsoleHandler
# O n\u00edvel de log a ser impresso no console ser\u00e1 INFO ou superior.
# O formato do log ser\u00e1 um formato de texto simples
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

############################################################
# Propriedades espec\u00edficas para classes
# Fornece controle extra para cada logger.
############################################################

# Voc\u00ea pode atribuir um n\u00edvel espec\u00edfico para uma classe 
# particular. Neste exemplo, para a classe com.xyz.Foo, 
# somente ser\u00e3o registrados os logs do n\u00edvel SEVERE.
#CadastroPessoas.level = FINEST
#com.xyz.Foo.level = SEVERE